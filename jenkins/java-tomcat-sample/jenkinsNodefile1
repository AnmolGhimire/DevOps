pipeline{
    agent {
        label 'ubuntu-vm'
    }
    stages{
        stage('build'){
            steps{
                sh 'mvn -f jenkins/java-tomcat-sample/pom.xml clean package'
            }
            post{
                success{
                    echo "archieve artifacts"
                    archiveArtifacts artifacts: '**/*.war', followSymlinks: false
                }
            }
        }
    
        stage('create tomcat image'){
            agent {
                label'ubuntu-vm'
            }
            steps{
                copyArtifacts filter: '**/*.war', fingerprintArtifacts: true, projectName: env.JOB_NAME, selector: specific(env.BUILD_NUMBER)
                echo "building docker image"
                sh '''
                original_pwd=$(pwd -P)
                cd jenkins/java-tomcat-sample
                docker build -t localtomcatimg:$BUILD_NUMBER .
                cd $original_pwd
                sh '''
            }

        }
        stage('deploy to stagging'){
            agent{
                label 'ubuntu-vm'
            }
            steps{
                echo "running in stagging env"
                sh '''
                docker container stop tomcatstaggingenv || true
                docker container rm -f tomcatstaggingenv || true
                docker run -itd --name tomcatstaggingenv -p 8089:8080 localtomcatimg:$BUILD_NUMBER
                sh '''
            }
        }
        stage("deploy to production"){
            agent{
                label 'ubuntu-vm'
            }
            steps{
                timeout(time:1,unit:'DAYS'){
                input message:'Approve PRODUCTION deployment?'
                }
                echo "running in production env"
                sh '''
                docker container stop tomcatprodenv || true
                docker container rm tomcatprodenv || true
                docker run -itd --name tomcatprodenv -p 8087:8080 localtomcatimg:$BUILD_NUMBER
                sh '''
            }
        }
    }
    post { 
        always { 
            mail to: 'harikamai@gmail.com',
            subject: "Job '${JOB_NAME}' (${BUILD_NUMBER}) is waiting for input",
            body: "Please go to ${BUILD_URL} and verify the build"
        }
        success {
            mail bcc: 'harikamai@gmail.com', body: """Hi Team,

Build #$BUILD_NUMBER is successful, please go through the url

$BUILD_URL

and verify the details.

Regards,
DevOps Team""", cc: '', from: '', replyTo: '', subject: 'BUILD SUCCESS NOTIFICATION', to: 'harikamai@gmail.com'
        }
        failure {
            mail bcc: 'harikamai@gmail.com', body: """Hi Team,
            
Build #$BUILD_NUMBER is unsuccessful, please go through the url

$BUILD_URL

and verify the details.

Regards,
DevOps Team""", cc: '', from: '', replyTo: '', subject: 'BUILD FAILED NOTIFICATION', to: 'harikamai@gmail.com'
        }
    }
}



